import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind, mannwhitneyu

# Load your data (assuming it's in CSV)
df = pd.read_csv('your_data.csv')

# Convert Day to datetime
df['Day'] = pd.to_datetime(df['Day'])

# Extract Weekday
df['Weekday'] = df['Day'].dt.day_name()

# Preview the data
print(df.head())

# Check for missing values
print(df.isna().sum())

# Simple EDA: Boxplot of avg_hold_time per weekday
plt.figure(figsize=(12, 6))
sns.boxplot(x='Weekday', y='avg_hold_time', data=df,
            order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
plt.title('Average Hold Time by Weekday')
plt.xticks(rotation=45)
plt.show()

# Line plot to visualize trends over time
df.set_index('Day')['avg_hold_time'].plot(figsize=(15, 5), title='Avg Hold Time Over Time')
plt.xlabel('Date')
plt.ylabel('Avg Hold Time')
plt.show()



# Mark Monday's avg_hold_time as high or low relative to week's average
df['YearWeek'] = df['Day'].dt.strftime('%Y-%U')

# Calculate weekly average excluding Monday
weekly_avg_excl_monday = df[df['Weekday'] != 'Monday'].groupby('YearWeek')['avg_hold_time'].mean().reset_index()
weekly_avg_excl_monday.columns = ['YearWeek', 'WeeklyAvgExclMonday']

# Merge with original df
df = df.merge(weekly_avg_excl_monday, on='YearWeek', how='left')

# Flag Monday as High or Low relative to rest of week
def monday_flag(row):
    if row['Weekday'] == 'Monday':
        return 'High' if row['avg_hold_time'] > row['WeeklyAvgExclMonday'] else 'Low'
    else:
        return np.nan

df['MondayFlag'] = df.apply(monday_flag, axis=1)

# Forward-fill the MondayFlag to propagate throughout the week
df['MondayFlag'] = df.groupby('YearWeek')['MondayFlag'].ffill()

print(df.head(10))


# Prepare datasets
high_monday_rest = df[(df['MondayFlag'] == 'High') & (df['Weekday'] != 'Monday')]['avg_hold_time']
low_monday_rest = df[(df['MondayFlag'] == 'Low') & (df['Weekday'] != 'Monday')]['avg_hold_time']

# Check distribution normality visually
plt.figure(figsize=(10,5))
sns.histplot(high_monday_rest, kde=True, color='blue', label='Rest of Week (High Monday)')
sns.histplot(low_monday_rest, kde=True, color='orange', label='Rest of Week (Low Monday)')
plt.legend()
plt.title("Distribution of Avg Hold Time for Rest of Week (by Monday's Avg Hold Time)")
plt.show()

# Test variance and normality assumption
print('Mean and Std deviation:')
print('High Monday Rest of Week:', high_monday_rest.mean(), high_monday_rest.std())
print('Low Monday Rest of Week:', low_monday_rest.mean(), low_monday_rest.std())

# Perform t-test (if distributions appear roughly normal and variance similar)
ttest_result = ttest_ind(high_monday_rest, low_monday_rest, equal_var=False)
print("T-Test Result:")
print("T-statistic:", ttest_result.statistic, "P-value:", ttest_result.pvalue)

# If non-normal or distributions unclear, perform Mann-Whitney U Test (non-parametric)
mw_result = mannwhitneyu(high_monday_rest, low_monday_rest, alternative='two-sided')
print("Mann-Whitney U Test Result:")
print("U-statistic:", mw_result.statistic, "P-value:", mw_result.pvalue)

# Interpretation
alpha = 0.05
if ttest_result.pvalue < alpha:
    print("The difference is statistically significant based on T-test (p < 0.05).")
else:
    print("No significant difference based on T-test (p >= 0.05).")

if mw_result.pvalue < alpha:
    print("The difference is statistically significant based on Mann-Whitney U test (p < 0.05).")
else:
    print("No significant difference based on Mann-Whitney U test (p >= 0.05).")
