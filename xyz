import openai
import pandas as pd

# Configure OpenAI API key
openai.api_key = "your_openai_api_key"

def validate_data_dictionary(data_dict_path, rules_text, output_path):
    """
    Validates the data dictionary against rules using OpenAI API.

    Parameters:
        data_dict_path (str): Path to the input Excel file containing the data dictionary.
        rules_text (str): Rules provided for validation.
        output_path (str): Path to save the output Excel file with corrections.
    """
    # Load the data dictionary
    data_dict = pd.read_excel(data_dict_path)
    
    # Initialize an empty list to store corrections
    corrections = []

    # Iterate through each row of the data dictionary
    for _, row in data_dict.iterrows():
        row_data = row.to_dict()
        row_str = "\n".join([f"{key}: {value}" for key, value in row_data.items()])
        
        # Construct the OpenAI prompt
        prompt = f"""
        Validate the following data dictionary entry based on the provided rules:

        Rules:
        {rules_text}

        Data Dictionary Entry:
        {row_str}

        Identify any inconsistencies, errors, or gaps, and suggest corrections.
        Only provide the corrections in a structured format.
        """

        # Call the OpenAI API
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a schema validation assistant."},
                    {"role": "user", "content": prompt},
                ],
            )
            correction = response['choices'][0]['message']['content'].strip()
            corrections.append({"Row": row_data, "Correction": correction})
        except Exception as e:
            corrections.append({"Row": row_data, "Correction": f"Error: {e}"})

    # Save corrections to an Excel file
    corrections_df = pd.DataFrame(corrections)
    corrections_df.to_excel(output_path, index=False)

# Rules text from the uploaded images
rules_text = """
1. Any word in Table/Column name which is more than 10 characters should be abbreviated and must get approval from BIS DA.
2. Table/Column names should be singular.
3. Table names must be readable from left to right (e.g., Provider Location -> PROVR_LOC).
4. Column names must be readable from right to left (e.g., Provide Location Identifier -> IDN_LOC_PROVR).
5. The first three characters of a column name should be a class word (list provided in Classword sheet).
6. Approved abbreviations are available at https://dhhsintra.dpw.state.pa.us/datadictionary/DataAbbr.aspx.
7. Table/Column names must not exceed 50 characters.

Modernization Rules:
8. Table names must be readable from left to right (e.g., Provider Location -> ProviderLocation).
9. Column names must be readable from right to left (e.g., Provide Location Identifier -> ProviderLocationIdentifier).

Additional QA Checks:
10. Table names must start with "T_" and must only use approved abbreviations.
11. English names should be spelled out in full.
12. Table descriptions must include:
    - Type of data it stores
    - Source of the data
    - Data granularity
    - Data load frequency and strategy (e.g., truncate reload or incremental).
13. Column descriptions must match the column names.
14. Foreign key (FK) columns should end with `_FK` and must include the related dimension table in the description.
15. Column starting with `CDE` must have equivalent columns starting with `NAM` (e.g., CDE_ERROR -> NAM_ERROR).
16. Data types such as Number/Varchar must include precision, and they cannot be blank.
17. Columns should have either `NULL` or `NOT NULL`.
18. Descriptions must not be identical for different column names.

Spell Checks:
19. Ensure all abbreviations and acronyms are spelled out unless explicitly approved.
20. Subtype abbreviations must use `SBTYP` instead of `TYPE_SUB`.
"""

# Paths to input and output files
data_dict_path = "data_dictionary.xlsx"  # Replace with your input file path
output_path = "data_dictionary_corrections.xlsx"  # Replace with your output file path

# Run the validation
validate_data_dictionary(data_dict_path, rules_text, output_path)
