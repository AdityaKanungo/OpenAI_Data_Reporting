# --- Additional test code for positive and negative test cases ---
import spacy

def run_tests():
    # Create a new NLP model and set the custom tokenizer
    nlp = spacy.load("en_core_web_sm")
    nlp.tokenizer = custom_tokenizer(nlp)
    
    # Create an EntityRuler and add it to the pipeline
    global ruler  # make ruler global so that the filter functions (ssn, birthday, etc.) can use it
    ruler = spacy.pipeline.EntityRuler(nlp, overwrite_ents=True)
    nlp.add_pipe("entity_ruler", last=True)
    
    # Set globals so the provided functions use our nlp and ruler objects
    globals()['nlp'] = nlp
    globals()['ruler'] = ruler

    # Add redaction patterns via the provided functions
    ssn()
    birthday()  # filters DOB
    casenum()
    streetnum()
    zip()

    # Helper function to extract entity labels from a text
    def get_labels(text):
        doc = nlp(text)
        return [ent.label_ for ent in doc.ents]

    # Define test cases:
    # Each test case is a tuple: (test name, input text, expected entity labels)
    test_cases = [
        # Positive cases: should match the provided regex patterns
        ("Positive SSN", "My SSN is 123-45-6789.", ["SSN"]),
        ("Positive DOB", "I was born on 12/31/1999.", ["DOB"]),
        ("Positive CASENUM (12 digits)", "Case: 123456789012", ["CASENUM"]),
        ("Positive CASENUM (14 digits)", "Case: 12345678901234", ["CASENUM"]),
        ("Positive STREETNUM", "Address: 1234567", ["STREETNUM"]),
        ("Positive ZIP", "ZIP: 12345", ["ZIP"]),
        
        # Negative cases: should not match
        ("Negative SSN", "ID: 123456789", []),
        ("Negative DOB", "Birth: 1999/12/31", []),
        ("Negative CASENUM", "Case: 12345678", []),
        ("Negative STREETNUM", "House number: 12345", []),
        ("Negative ZIP", "Postal: 1234", []),
        ("No PII", "Hello, my name is John Doe.", []),
    ]

    # Run each test case
    for test_name, text, expected_labels in test_cases:
        found_labels = get_labels(text)
        print(f"Test: {test_name}")
        print("Input Text:", text)
        print("Expected Labels:", expected_labels)
        print("Found Labels:", found_labels)
        if set(found_labels) == set(expected_labels):
            print("Result: PASS")
        else:
            print("Result: FAIL")
        print("-" * 40)

if __name__ == "__main__":
    run_tests()
