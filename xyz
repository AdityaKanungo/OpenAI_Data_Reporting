import re
import spacy
from spacy.pipeline import EntityRuler

class Redacted:
    def __init__(self):
        self.nlp = spacy.load("en_core_web_sm")
        self.ruler = EntityRuler(self.nlp, overwrite_ents=True)
        self.nlp.add_pipe('entity_ruler')
        
        # Define all patterns once in the constructor
        patterns = [
            {"label": "CASENUM", "pattern": [{"TEXT": {"REGEX": r"^(?:\d{12}|\d{14})$"}}]},
            {"label": "DOB", "pattern": [{"TEXT": {"REGEX": r"^([0-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/([0-9]{4})$"}}]},
            {"label": "SSN", "pattern": [{"TEXT": {"REGEX": r"^\d{3}\W\d{2}\W\d{4}$"}}]},
            {"label": "STREETNUM", "pattern": [{"TEXT": {"REGEX": r"^\d{3}\d{4}$"}}]},
            {"label": "ZIP", "pattern": [{"TEXT": {"REGEX": r"^\d{5}$"}}]}
        ]
        self.ruler.add_patterns(patterns)

    def contains_entity(self, text, label):
        doc = self.nlp(text)
        return any(ent.label_ == label for ent in doc.ents)
    
    def casenum(self, text):
        return self.contains_entity(text, "CASENUM")

    def birthday(self, text):
        return self.contains_entity(text, "DOB")

    def ssn(self, text):
        return self.contains_entity(text, "SSN")

    def streetnum(self, text):
        return self.contains_entity(text, "STREETNUM")

    def zip(self, text):
        return self.contains_entity(text, "ZIP")

def run_tests():
    redacted = Redacted()
    
    assert redacted.casenum("123456789012"), "Failed: Valid 12-digit case number"
    assert redacted.casenum("12345678901234"), "Failed: Valid 14-digit case number"
    assert not redacted.casenum("1234567890"), "Failed: Invalid case number"
    
    assert redacted.birthday("5/12/1990"), "Failed: Valid birthday"
    assert not redacted.birthday("32/12/1990"), "Failed: Invalid birthday"
    
    assert redacted.ssn("123-45-6789"), "Failed: Valid SSN"
    assert not redacted.ssn("123456789"), "Failed: Invalid SSN"
    
    assert redacted.streetnum("1234567"), "Failed: Valid street number"
    assert not redacted.streetnum("12345"), "Failed: Invalid street number"
    
    assert redacted.zip("12345"), "Failed: Valid ZIP code"
    assert not redacted.zip("1234"), "Failed: Invalid ZIP code"
    
    print("All tests passed!")

run_tests()
