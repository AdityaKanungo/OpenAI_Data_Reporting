import streamlit as st
import pandas as pd
import json
import openai
from typing import Dict, List, Any

# ==============================
# 1. DATA LOADING FUNCTIONS
# ==============================

def load_data_dictionary(uploaded_file) -> pd.DataFrame:
    """Loads the data dictionary from an uploaded Excel file."""
    return pd.read_excel(uploaded_file)

def load_rules_txt(uploaded_file) -> str:
    """Loads the domain rules from an uploaded text file."""
    return uploaded_file.read().decode("utf-8")

def load_abbreviations(uploaded_file) -> Dict[str, str]:
    """Loads abbreviations from an uploaded CSV file and ensures proper formatting."""
    df_abbr = pd.read_csv(uploaded_file)
    df_abbr.columns = df_abbr.columns.str.strip()  # Trim spaces from column headers
    df_abbr = df_abbr.applymap(lambda x: x.strip().upper() if isinstance(x, str) else x)  # Normalize text to uppercase
    abbr_dict = df_abbr.set_index("ABBR")["NAME"].to_dict()  # Ensure lookup is done on 'ABBR'
    return abbr_dict

def load_class_words(uploaded_file) -> List[str]:
    """Loads class words from an uploaded CSV file."""
    df_class = pd.read_csv(uploaded_file)
    return df_class['CLASS WORDS'].str.strip().str.upper().tolist()

def call_openai_suggestion(table_name: str, column_name: str, failure_reasons: str, rules_text: str, missing_abbr: List[str]) -> Dict[str, str]:
    """Calls OpenAI API to suggest a corrected table and column name, ensuring non-abbreviations and valid abbreviations are retained."""
    prompt = f"""
    You are an expert in database table and column naming conventions.
    Based on the following validation failure reasons and naming rules, suggest a corrected table and column name.
    Ensure that non-abbreviation words remain unchanged in the column name.
    If a word appears to be a complete word rather than an abbreviation, do not remove it.
    If a word is already in the approved abbreviation list, do not remove or modify it.
    
    Table Name: {table_name}
    Column Name: {column_name}
    
    Failure Reasons:
    {failure_reasons}
    
    Naming Rules:
    {rules_text}
    
    Words that should remain unchanged in the column name:
    {', '.join(missing_abbr)}
    
    If the word HEADER (or similar full words) is flagged but does not appear to be an abbreviation, retain it in the column name and add a note stating: 'Although HEADER is not in the abbreviation list, it seems like a full word and has been kept.'
    
    Format the response as JSON:
    {{
      "Suggested Table Name": "{table_name}",
      "Suggested Column Name": "{column_name}",
      "Additional Notes": "If applicable, note why HEADER or similar words have been retained."
    }}
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )
        return json.loads(response["choices"][0]["message"]["content"])
    except Exception as e:
        return {"Suggested Table Name": table_name, "Suggested Column Name": column_name, "Additional Notes": "N/A", "Error": str(e)}

def validate_data_dictionary(df: pd.DataFrame, class_words: List[str], abbreviations: Dict[str, str], rules_text: str) -> pd.DataFrame:
    """Validates the data dictionary based on the provided rules, class words, and abbreviations."""
    results = []
    for _, row in df.iterrows():
        table_name = str(row.get('Table Name', '')).strip().upper()
        column_name = str(row.get('Column Name', '')).strip().upper()
        
        table_valid = table_name.startswith('T') and (table_name.endswith('FACT') or table_name.endswith('DIM'))
        column_prefix = column_name[:3]
        column_remaining_parts = column_name[4:].split('_') if len(column_name) > 3 else []
        
        column_valid = column_prefix in class_words
        
        failure_reasons = []
        if not table_valid:
            failure_reasons.append("Table name must start with 'T' and end with 'FACT' or 'DIM'.")
        if not column_valid:
            failure_reasons.append(f"Column name must start with a valid class word. Found '{column_prefix}', which is not in the list.")
        
        missing_abbr = [part for part in column_remaining_parts if part not in abbreviations and part.isalpha()]
        if missing_abbr:
            failure_reasons.append(f"Unrecognized abbreviation(s): {', '.join(missing_abbr)} are not in the approved list.")
        
        validation_status = "PASS" if not failure_reasons else "FAIL"
        
        suggested_names = {"Suggested Table Name": table_name, "Suggested Column Name": column_name, "Additional Notes": "N/A"}
        if validation_status == "FAIL":
            suggested_names = call_openai_suggestion(table_name, column_name, "; ".join(failure_reasons), rules_text, missing_abbr)
        
        results.append({
            "Table Name": table_name,
            "Column Name": column_name,
            "Validation Status": validation_status,
            "Notes": "Valid" if validation_status == "PASS" else "; ".join(failure_reasons),
            "Suggested Table Name": suggested_names.get("Suggested Table Name", table_name),
            "Suggested Column Name": suggested_names.get("Suggested Column Name", column_name),
            "Additional Notes": suggested_names.get("Additional Notes", "N/A"),
            "Error": suggested_names.get("Error", "None")
        })
    
    return pd.DataFrame(results)

# ==============================
# 2. STREAMLIT APP UI
# ==============================

def main():
    st.set_page_config(page_title="Data Dictionary Validator with AI Suggestions", layout="wide")
    st.title("üìä Data Dictionary Validator with AI Suggestions")
    st.write("Upload your Data Dictionary and Validation Rules to validate table and column names. AI will suggest corrections for failed entries.")
    
    openai.api_key = st.sidebar.text_input("Enter OpenAI API Key", type="password")
    
    st.sidebar.header("Upload Files")
    uploaded_dict = st.sidebar.file_uploader("Upload Data Dictionary (Excel)", type=["xlsx"])
    uploaded_rules = st.sidebar.file_uploader("Upload Domain Rules (Text)", type=["txt"])
    uploaded_abbr = st.sidebar.file_uploader("Upload Abbreviations (CSV)", type=["csv"])
    uploaded_class_words = st.sidebar.file_uploader("Upload Class Words (CSV)", type=["csv"])

    if uploaded_dict and uploaded_rules and uploaded_abbr and uploaded_class_words and openai.api_key:
        st.success("‚úÖ All files uploaded successfully!")
        
        df_dict = load_data_dictionary(uploaded_dict)
        rules_text = load_rules_txt(uploaded_rules)
        abbreviations = load_abbreviations(uploaded_abbr)
        class_words = load_class_words(uploaded_class_words)

        if st.button("üîç Validate & Suggest Corrections"):
            with st.spinner("Processing validation & AI suggestions..."):
                results_df = validate_data_dictionary(df_dict, class_words, abbreviations, rules_text)
                st.subheader("Validation Results with AI Suggestions")
                st.dataframe(results_df.style.set_sticky())

if __name__ == "__main__":
    main()
