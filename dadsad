# Updated analyze_cobol_code to split into four parts and handle plain text
def analyze_cobol_code(contents, user_prompt, system_prompt):
    # Split the content into four parts
    quarter_length = len(contents) // 4
    part1 = contents[:quarter_length]
    part2 = contents[quarter_length: 2 * quarter_length]
    part3 = contents[2 * quarter_length: 3 * quarter_length]
    part4 = contents[3 * quarter_length:]
    
    # Analyze each part separately and get plain text output
    part1_result = analyze_cobol_code_single(part1, user_prompt, system_prompt)
    part2_result = analyze_cobol_code_single(part2, user_prompt, system_prompt)
    part3_result = analyze_cobol_code_single(part3, user_prompt, system_prompt)
    part4_result = analyze_cobol_code_single(part4, user_prompt, system_prompt)
    
    # Combine all four parts' results as plain text
    if part1_result and part2_result and part3_result and part4_result:
        combined_result = part1_result + "\n" + part2_result + "\n" + part3_result + "\n" + part4_result
        return combined_result
    else:
        return None

# Helper function to analyze a single part
def analyze_cobol_code_single(contents, user_prompt, system_prompt):
    user_prompt = user_prompt + contents
    response = client.chat.completions.create(
        model=deployment_name,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        temperature=0.2
    )
    return response.choices[0].message.content

# Ensure the process_batch_files function remains mostly unchanged
def process_batch_files(batch_directory, output_directory, flow_details):
    start_time = time.time()
    os.chdir(batch_directory)
    
    # Process each COBOL program
    batch_files = [f for f in os.listdir(batch_directory) if f.endswith('.txt')]
    consolidated_results = []
    
    for batch_file in batch_files:
        print(f"Processing file: {batch_file}")
        
        # Read and clean the COBOL code
        file_contents = read_file(batch_file)
        cobol_code = remove_comments(file_contents)
        
        # Analyze the code with forced splitting into four parts
        analysis_result = analyze_cobol_code(cobol_code, user_prompt_with_flow, system_prompt)
        
        if analysis_result:
            # Save individual program's analysis as plain text
            text_filename = os.path.join(output_directory, f"{batch_file.split('.')[0]}_analysis.txt")
            with open(text_filename, 'w', encoding='utf-8') as text_file:
                text_file.write(analysis_result)
            print(f"Analysis successfully saved to {text_filename}")
            
            # Append the result to consolidated_results as plain text
            consolidated_results.append(analysis_result)
    
    # Save the consolidated text output for all programs
    consolidated_filename = os.path.join(output_directory, "consolidated_analysis.txt")
    with open(consolidated_filename, 'w', encoding='utf-8') as consolidated_file:
        for result in consolidated_results:
            consolidated_file.write(result + "\n")
    
    print(f"Consolidated analysis saved to {consolidated_filename}")
    print(f"Processing completed in {time.time() - start_time} seconds.")
