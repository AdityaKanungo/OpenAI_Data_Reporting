import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns  # For an enhanced heatmap visualization
from scipy import stats
import statsmodels.api as sm

# -----------------------------
# 1. Data Preparation and Cleaning
# -----------------------------
# Load the dataset (update the file path as needed)
df = pd.read_csv('call_data.csv')

# Convert the 'Day' column to datetime and create additional time features
df['Day'] = pd.to_datetime(df['Day'])
df['weekday'] = df['Day'].dt.day_name()
df['week'] = df['Day'].dt.isocalendar().week

# Check descriptive statistics and missing values
print("Descriptive Statistics:")
print(df.describe())

print("\nMissing Values:")
print(df.isna().sum())

# -----------------------------
# 2. Feature Engineering
# -----------------------------
# Create new features:
#  - non_offered: calls that entered the queue but were not offered
#  - non_accepted: calls that were offered but were not accepted
df['non_offered'] = df['Entered'] - df['Offered']
df['non_accepted'] = df['Offered'] - df['Accepted']

# Validate the new features with a summary
print("\nSummary of Key and Engineered Features:")
print(df[['Entered', 'Offered', 'Accepted', 'non_offered', 'non_accepted']].describe())

# -----------------------------
# 3. Univariate Analysis: Distributions & Outliers
# -----------------------------
# Identify numeric columns for analysis (excluding derived time features)
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()

# Plot histograms for each numeric feature
for col in numeric_cols:
    plt.figure(figsize=(6,4))
    plt.hist(df[col].dropna(), bins=30, alpha=0.7)
    plt.xlabel(col)
    plt.ylabel("Frequency")
    plt.title(f"Distribution of {col}")
    plt.show()

# Plot box plots for each numeric feature to identify potential outliers
for col in numeric_cols:
    plt.figure(figsize=(6,4))
    plt.boxplot(df[col].dropna(), vert=False)
    plt.xlabel(col)
    plt.title(f"Boxplot of {col}")
    plt.show()

# -----------------------------
# 4. Correlation and Multivariate Analysis
# -----------------------------
# Calculate correlation matrix among numeric features
corr_matrix = df[numeric_cols].corr()
print("\nCorrelation Matrix:")
print(corr_matrix)

# Visualize the correlation matrix with a heatmap
plt.figure(figsize=(12,10))
sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap='coolwarm', square=True)
plt.title("Correlation Matrix Heatmap")
plt.show()

# Selected scatter plots to examine relationships
selected_pairs = [
    ('Entered', 'Accepted'), 
    ('Offered', 'Accepted'),
    ('non_offered', 'non_accepted'),
    ('avg_accept_time', 'avg_handle_time'),
    ('Entered', 'avg_accept_time')
]
for x, y in selected_pairs:
    plt.figure(figsize=(6,4))
    plt.scatter(df[x], df[y], alpha=0.5)
    plt.xlabel(x)
    plt.ylabel(y)
    plt.title(f"Scatter Plot: {x} vs {y}")
    plt.show()

# -----------------------------
# 5. Weekly Analysis: Monday vs. Rest of the Week
# -----------------------------
weekly_analysis = []
# Group the data by week
for week, group in df.groupby('week'):
    monday = group[group['weekday'] == 'Monday']
    other_days = group[group['weekday'] != 'Monday']
    
    # Only include weeks where Monday and other days exist
    if not monday.empty and not other_days.empty:
        monday_volume = monday['Entered'].sum()
        other_volume_avg = other_days['Entered'].sum() / other_days['weekday'].nunique()
        
        monday_accept_time = monday['avg_accept_time'].mean()
        other_accept_time = other_days['avg_accept_time'].mean()
        
        # New engineered features on a weekly basis (summing up non_offered calls as example)
        monday_non_offered = monday['non_offered'].sum()
        other_non_offered_avg = other_days['non_offered'].sum() / other_days['weekday'].nunique()
        
        weekly_analysis.append({
            'week': week,
            'monday_volume': monday_volume,
            'other_volume_avg': other_volume_avg,
            'monday_avg_accept_time': monday_accept_time,
            'other_avg_accept_time': other_accept_time,
            'monday_non_offered': monday_non_offered,
            'other_non_offered_avg': other_non_offered_avg
        })

weekly_df = pd.DataFrame(weekly_analysis)
print("\nWeekly Analysis (Monday vs. Other Days):")
print(weekly_df)

# Correlation tests for Monday vs. other days metrics
vol_corr, vol_p = stats.pearsonr(weekly_df['monday_volume'], weekly_df['other_volume_avg'])
time_corr, time_p = stats.pearsonr(weekly_df['monday_avg_accept_time'], weekly_df['other_avg_accept_time'])
non_offered_corr, non_offered_p = stats.pearsonr(weekly_df['monday_non_offered'], weekly_df['other_non_offered_avg'])

print("\nPearson Correlation Results:")
print(f"Call Volume: correlation = {vol_corr:.2f}, p-value = {vol_p:.4f}")
print(f"Avg Accept Time: correlation = {time_corr:.2f}, p-value = {time_p:.4f}")
print(f"Non-offered Calls: correlation = {non_offered_corr:.2f}, p-value = {non_offered_p:.4f}")

# -----------------------------
# 6. Regression Analysis: Predicting Accepted Calls
# -----------------------------
# Build a multiple regression model to predict 'Accepted' using original and new features.
# Choose a set of predictors including volume, offered, non_offered, non_accepted and key wait times.
predictor_features = ['Entered', 'Offered', 'non_offered', 'non_accepted', 
                      'Distributed', 'avg_accept_time', 'avh_hold_time']
df_reg = df.dropna(subset=['Accepted'] + predictor_features)

X = df_reg[predictor_features]
y = df_reg['Accepted']
X = sm.add_constant(X)  # Add intercept

model = sm.OLS(y, X).fit()
print("\nRegression Model Summary (Predicting Accepted Calls):")
print(model.summary())

# -----------------------------
# 7. Validation: Answer_Rate Consistency Check
# -----------------------------
# Validate the provided Answer_Rate using a computed metric (Accepted/Offered)
df['computed_answer_rate'] = np.where(df['Offered'] != 0, df['Accepted'] / df['Offered'], np.nan)

plt.figure(figsize=(6,4))
plt.scatter(df['Answer_Rate'], df['computed_answer_rate'], alpha=0.5)
plt.xlabel('Provided Answer_Rate')
plt.ylabel('Computed Answer_Rate (Accepted/Offered)')
plt.title("Comparison: Provided vs. Computed Answer_Rate")
plt.show()

print("\nFirst few rows with Answer_Rate Comparison:")
print(df[['Day', 'Answer_Rate', 'computed_answer_rate']].head())
